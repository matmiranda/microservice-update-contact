name: .NET CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore AtualizarContatos.Api.sln

      - name: Build
        run: dotnet build AtualizarContatos.Api.sln --configuration Release

      - name: Start RabbitMQ
        run: |
          docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3-management
          sleep 10
          for i in {1..10}; do
            if curl -u guest:guest -f http://localhost:15672/api/healthchecks/node > /dev/null 2>&1; then
              echo "RabbitMQ is ready"
              exit 0
            fi
            echo "Waiting for RabbitMQ to start... Attempt $i of 10"
            sleep 5
          done
          echo "RabbitMQ failed to start"
          exit 1

      - name: Set Environment Variables
        run: |
          echo "RABBITMQSETTINGS__HOST=localhost" >> $GITHUB_ENV
          echo "RABBITMQSETTINGS__USERNAME=guest" >> $GITHUB_ENV
          echo "RABBITMQSETTINGS__PASSWORD=guest" >> $GITHUB_ENV

      - name: Start API in Background
        env:
          ASPNETCORE_URLS: http://localhost:5102
        run: |
          cd AtualizarContatos.Api/bin/Release/net8.0/
          dotnet AtualizarContatos.Api.dll & disown
          sleep 5

      - name: Wait for API to Start
        run: |
          for i in {1..10}; do
            if curl -f http://localhost:5102/health > /dev/null 2>&1; then
              echo "API started successfully"
              exit 0
            fi
            echo "Waiting for API to start... Attempt $i of 10"
            sleep 3
          done
          echo "API failed to start"
          exit 1

      - name: Test API Health
        run: curl -f http://localhost:5102/health || exit 1

      - name: Test API Metrics
        run: curl -f http://localhost:5102/metrics || exit 1

      - name: Run Unit Tests        
        run: dotnet test AtualizarContatos.Test/AtualizarContatos.Test.csproj --configuration Release --logger "console;verbosity=detailed"

      - name: Publish
        run: dotnet publish AtualizarContatos.Api/AtualizarContatos.Api.csproj --configuration Release --output AtualizarContatos.Api/publish

      - name: Deploy to Azure Aplication Api
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'atualiza-contato'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: 'AtualizarContatos.Api/publish'


      - name: Cleanup
        if: always()
        run: |
          docker rm -f rabbitmq || true
          docker volume prune -f